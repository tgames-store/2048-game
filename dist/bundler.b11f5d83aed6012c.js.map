{"version":3,"file":"bundler.b11f5d83aed6012c.js","mappings":"mBAkFA,SAASA,IACLC,OAAOC,KAAO,IAAIC,EAAK,GACvBF,OAAOC,KAAKE,aACZ,IAAIC,EAAQC,SAASC,cAAc,UACnCC,QAAQC,IAAIJ,GACZA,EAAMK,MAAMC,QAAU,OACLL,SAASC,cAAc,oBAC7BG,MAAMC,QAAU,MAC9B,CAOD,SAASR,EAAKS,GACVC,KAAKC,KAAOF,EACZC,KAAKE,QAAUH,EAEfC,KAAKG,MAAQ,GACbH,KAAKI,aAAe,WAChB,OAAOC,EAAEC,QAAQN,KAAKG,MACzB,EAGDH,KAAKO,MAAQ,EACbC,EAAE,qBAAqBC,KAAKT,KAAKO,MAAMG,YAGvCV,KAAKW,gBAAiB,CAEzB,CA4aD,SAASC,EAAKC,EAAGC,EAAGzB,GAChBW,KAAKX,KAAOA,EAGZW,KAAKe,GAELf,KAAKa,EAAIA,EACTb,KAAKc,EAAIA,EAEgB,KAAR,GAZVE,KAAKC,MAYK,GAZCD,KAAKE,WAanBlB,KAAKmB,UAAY,EAEjBnB,KAAKmB,UAAY,EAGrBC,OAAOC,iBAAiBrB,KAAM,CAC1BsB,MAAO,CACHC,IAAK,WACD,OAAOvB,KAAKmB,SACf,EACDK,IAAK,SAAUC,GACXzB,KAAKmB,UAAYM,EACjBzB,KAAKe,GAAGW,KAAK,gBAAgBjB,KAAKT,KAAKmB,WAAWQ,KAAK,aAAcF,EACxE,KAMTzB,KAAK4B,SAAU,EAEf5B,KAAKT,YACR,CArhBYE,SAASC,cAAc,0BAC7BmC,QAAU,KACbC,OAAOC,eAAe,UAAW,EAAG,GACpC5C,IACA2C,OAAOE,aAAP,EAGWvC,SAASC,cAAc,4BAC7BmC,QAAU,KACfC,OAAOG,OAAP,EAGaxC,SAASC,cAAc,8BAC7BmC,QAAU,KACjBC,OAAOI,SAAS7C,KAAKkB,OACrBuB,OAAOC,eAAe,UAAW,EAAG,GACpC5C,IACA2C,OAAOE,aAAP,EAGWvC,SAASC,cAAc,4BAC7BmC,QAAU,KACf1C,IACA2C,OAAOE,cACUvC,SAASC,cAAc,iBAC7BG,MAAMC,QAAU,MAA3B,EAGUL,SAASC,cAAc,2BAC7BmC,QAAU,KACdzC,OAAOC,KAAK8C,SAAZ,EAGc1C,SAASC,cAAc,+BAC7BmC,QAAU,KAClBC,OAAOC,eAAgB,UAAW,GAAI,GAzD1C,WACE,IAAIK,EAAWhD,OAAOC,KAAKgD,iBACvBC,EAAY,GAEhBF,EAASG,SAASC,IAChBpD,OAAOC,KAAKc,MAAMqC,EAAK3B,GAAG2B,EAAK1B,GAAG2B,WAAWC,MAClCjD,SAASkD,iBAAkB,YAAoB,GAATH,EAAK3B,OACjD0B,SAASK,IACTA,EAAKC,aAAa,YAAe,GAAW,GAATL,EAAK1B,GACzCwB,EAAUQ,KAAKF,EAChB,GAHH,IAOFN,EAAUC,SAASC,IACjBA,EAAKO,QAAL,IAGF3D,OAAOC,KAAK2D,UACb,CAuCGC,GACAC,aAAa9D,OAAOC,KAAK8D,YACL1D,SAASC,cAAc,oBAC7BG,MAAMC,QAAU,MAA9B,EAaJU,EAAEf,UAAU2D,MAAMjE,GA0BlBG,EAAK+D,UAAU9D,WAAa,WAExBiB,EAAE,SAAS8C,QACX9C,EAAE,mBAAmB8C,QAGrBtD,KAAKuD,YACLvD,KAAKgD,WACLhD,KAAKwD,oBAER,EAMDlE,EAAK+D,UAAUE,UAAY,WAEvB,SAASE,EAAa5C,EAAGC,GACrB,IAAI4C,EAAclD,EAAEmD,UAAUnD,EAAE,uBAAuBC,QAEvD,OADAD,EAAEkD,GAAaE,SAAS,SACjB,CACH/C,EAAGA,EACHC,EAAGA,EACH2B,WAAY,GAEnB,CAID,IAAK,IAAI5B,EAAI,EAAGA,EAAIb,KAAKC,KAAMY,IAAK,CAEhCb,KAAKG,MAAM2C,KADI,IAEf,IAAK,IAAIhC,EAAI,EAAGA,EAAId,KAAKE,QAASY,IAAK,CACnC,IAAI+C,EAAUJ,EAAa5C,EAAGC,GAChBd,KAAKG,MAAMU,GACjBiC,KAAKe,EAChB,CACJ,CAEJ,EAKDvE,EAAK+D,UAAUL,SAAW,WAEtBhD,KAAK8D,aAEL,IAAIC,EAAY/D,KAAKgE,qBACV,IAAIpD,EAAKmD,EAAUlD,EAAGkD,EAAUjD,EAAGzB,MAE9CW,KAAK8D,YAER,EAMDxE,EAAK+D,UAAUG,mBAAqB,WAChC,IAAIS,EAAOjE,KACPkE,EAAezE,SAAS0E,eAAe,kBAK3C/E,OAAOgF,YAAchF,OAAOgF,WAAWC,UACvCjF,OAAOgF,WAAa,IAAIE,OAAOJ,EAAc,CACzCK,YAAa,CAAC,CAACD,OAAOE,MAAO,CAACC,UAAWH,OAAOI,mBAGpDtF,OAAOgF,WAAWO,GAAG,aAAa,SAAUC,GACxCX,EAAKY,KAAK,OACb,IAAEF,GAAG,cAAc,SAAUC,GAC1BX,EAAKY,KAAK,QACb,IAAEF,GAAG,aAAa,SAAUC,GACzBX,EAAKY,KAAK,OACb,IAAEF,GAAG,WAAW,SAAUC,GACvBX,EAAKY,KAAK,KACb,IAQDrE,EAAEf,UAAUqF,IAAI,gBAAgBH,GAAG,gBAAgB,SAAUI,GAEzD,OADAA,EAAMC,iBACED,EAAME,OAEV,KAAK,GACDhB,EAAKY,KAAK,QACV,MAEJ,KAAK,GACDZ,EAAKY,KAAK,MACV,MAEJ,KAAK,GACDZ,EAAKY,KAAK,SACV,MAEJ,KAAK,GACDZ,EAAKY,KAAK,QAIrB,IAGDrE,EAAE,uBAAuBsE,IAAI,iBAAiBH,GAAG,gBAAiBvF,OAAOD,UAE5E,EAMDG,EAAK+D,UAAU6B,QAAU,WACrB,IAAIC,EAAO1F,SAAS2F,uBAAuB,QAC3C,KAAOD,EAAKE,OAAS,GACjBF,EAAK,GAAGG,WAAWC,YAAYJ,EAAK,IAE5B1F,SAASC,cAAc,UAC7BG,MAAMC,QAAU,OACtB0F,MAAM,WACN1D,OAAOI,SAAS7C,KAAKkB,MACxB,EAUDjB,EAAK+D,UAAUoC,WAAa,WACxB,IAAIC,EAAY1F,KAAKI,eACjBuF,GAAO,IAUX,OARAD,EAAUnD,SAASK,IACgB,IAA3BA,EAAKH,WAAW4C,QACZzC,EAAKH,WAAW,GAAGtB,UAAYwE,IAC/BA,EAAO/C,EAAKH,WAAW,GAAGtB,UAEjC,IAGEwE,CACV,EAGDrG,EAAK+D,UAAUuC,YAAc,SAASnE,GAClC,IAAIoE,EAAYpG,SAASC,cAAc,sBACnCoG,EAAQrG,SAASsG,cAAc,OACnCD,EAAME,UAAY,OAClBF,EAAMG,UAAa,wCAAuCxE,KAAOA,WACjEoE,EAAUK,YAAYJ,EACzB,EAGDxG,EAAK+D,UAAUlB,QAAU,WAErB,IAAIgE,EAAe1G,SAASC,cAAc,mBAC9BD,SAASC,cAAc,oBAE7BG,MAAMC,QAAU,OACtBqG,EAAatG,MAAMC,QAAU,OAE7B,IAAIsG,EAASpG,KAAKyF,aAEdN,EAAO1F,SAAS2F,uBAAuB,QAC3C,KAAOD,EAAKE,OAAS,GACjBF,EAAK,GAAGG,WAAWC,YAAYJ,EAAK,IAGxCnF,KAAK4F,YAAYQ,GACE3G,SAASC,cAAc,uBAC7BuG,UAAa,GAAEjG,KAAKO,QAEjCuB,OAAOI,SAAS7C,KAAKkB,OAErB2C,aAAalD,KAAKmD,WACrB,EAGD7D,EAAK+D,UAAUgD,SAAW,WACV5G,SAASC,cAAc,oBAC7BG,MAAMC,QAAU,OACtBE,KAAKmD,WAAamD,YAAW,KAC1BtG,KAAKmC,SAAL,GACA,IACN,EAMD7C,EAAK+D,UAAUS,WAAa,WACxB,IAAI4B,EAAY1F,KAAKI,eAEjBmG,GAAS,EACTC,GAAiB,EACjBC,GAAgB,EAwBpB,OAtBAf,EAAUnD,SAAQ,SAAUd,EAAKiF,EAAOC,GACpClF,EAAIgB,WAAWF,SAAQ,SAAUd,EAAKiF,EAAOC,GACnB,SAAlBlF,EAAIN,YACJoF,GAAS,EAEhB,GACJ,IAEGvG,KAAK4G,gBAAgBvB,OAAS,IAC9BoB,GAAgB,GAGpBf,EAAUnD,SAAQ,SAAUd,EAAKiF,EAAOC,GACpClF,EAAIgB,WAAWF,SAAQ,SAAUd,EAAKiF,EAAOC,GACzClF,EAAIoF,aACgB,IAAhBpF,EAAIG,UACJ4E,GAAiB,EAExB,GACJ,IAGGD,GACAvG,KAAKkF,WACE,IACCuB,IAAkBD,IAE1BxG,KAAKqG,YACE,EAMd,EAKD/G,EAAK+D,UAAUuD,cAAgB,WAI3B,OAHiBvG,EAAEyG,OAAO9G,KAAKI,gBAAgB,SAAUqB,GACrD,OAAQA,EAAIgB,WAAW4C,MAC1B,GAEJ,EAMD/F,EAAK+D,UAAUW,mBAAqB,WAChC,IAAI+C,EAAiB/G,KAAK4G,gBAK1B,OAAOG,EAJW/F,KAAKC,MACnBD,KAAKE,SAAWF,KAAKC,MAAM8F,EAAe1B,SAIjD,EAYD/F,EAAK+D,UAAUhB,eAAiB,WAC5B,IAAIqD,EAAY1F,KAAKI,eACjB4G,EAAQ,GAUZ,OARAtB,EAAUnD,SAASK,IACgB,IAA3BA,EAAKH,WAAW4C,QACqB,IAAjCzC,EAAKH,WAAW,GAAGtB,WACnB6F,EAAMlE,KAAK,CAACjC,EAAG+B,EAAKH,WAAW,GAAG5B,EAAGC,EAAG8B,EAAKH,WAAW,GAAG3B,GAElE,IAGEkG,CACV,EAkBD1H,EAAK+D,UAAU4D,UAAY,WACvB,IAAIvB,EAAY1F,KAAKI,eACjB8G,EAAWlH,KAAKO,MAGpBmF,EAAUnD,SAAQ,SAAUd,EAAKiF,EAAOC,GACpC,GAA8B,IAA1BlF,EAAIgB,WAAW4C,OAAc,CAE7B,IAAI8B,EAAe1F,EAAIgB,WAAW,GAAGtB,UAErCM,EAAIgB,WAAW,GAAGnB,MAAuB,EAAf6F,EAElB1F,EAAIgB,WAAWC,MACrB3B,GAAGgC,SAELmE,GAAYC,EACZrF,OAAOsF,SAASF,EAEnB,CACJ,IAEDlH,KAAKO,MAAQ2G,EACb1G,EAAE,qBAAqBC,KAAKT,KAAKO,MAAMG,WAC1C,EAMDpB,EAAK+D,UAAUgE,eAAiB,SAAU3B,GACtC,IAAIzB,EAAOjE,KACPsH,EAAe,GAEnB,GAAItH,KAAKW,eACL,OAAO,EAGXX,KAAKW,gBAAiB,EACtB+E,EAAUnD,SAAQ,SAAUd,EAAKiF,EAAOC,GACpClF,EAAIgB,WAAWF,SAAQ,SAAUd,EAAKiF,EAAOC,GACzCW,EAAaxE,KAAKrB,EAAI8F,kBACzB,GACJ,IAED/G,EAAEgH,KAAKC,MAAMjH,EAAG8G,GAAcI,MAAK,WAC/BzD,EAAKtD,gBAAiB,EACtBsD,EAAKgD,YACLhD,EAAKjB,UACR,IAC2B,IAAxBsE,EAAajC,SACbpB,EAAKtD,gBAAiB,EACtBsD,EAAKgD,YACLhD,EAAKjB,WAEZ,EAOD1D,EAAK+D,UAAUwB,KAAO,SAAU8C,GAC5B,IAAIjC,EAGAjB,EAAYkD,EAAaC,cAGzBC,GAAkB,EAEtB,GAAI7H,KAAKW,eACL,OAAO,EAIO,OAAd8D,EACAiB,EAAYrF,EAAEyH,QAAQ9H,KAAKI,eAAgB,IAAK,OAC3B,UAAdqE,EAEPiB,EAAYrF,EAAEyH,QAAQ9H,KAAKI,eAAgB,IAAK,QAC3B,SAAdqE,EAEPiB,EAAYrF,EAAEyH,QAAQ9H,KAAKI,eAAgB,IAAK,QAC3B,SAAdqE,IAEPiB,EAAYrF,EAAEyH,QAAQ9H,KAAKI,eAAgB,IAAK,QAKpDsF,EAAUnD,SAAQ,SAAUd,EAAKiF,EAAOC,GACpClF,EAAIgB,WAAW4C,QACX5D,EAAIgB,WAAWF,SAAQ,SAAUd,GACzBA,EAAIoD,KAAKJ,GAAW,KACpBoD,GAAkB,EAClBpG,EAAIoD,KAAKJ,GAEhB,GAER,IAGDoD,GAAkB7H,KAAKqH,eAAe3B,EACzC,EAiDD9E,EAAKyC,UAAU9D,WAAa,WAExB,IAAIwI,EAAUvH,EAAEmD,UAAUnD,EAAE,kBAAkBC,QAC9CT,KAAKe,GAAKP,EAAEuH,GACZ/H,KAAKe,GAAGW,KAAK,gBAAgBjB,KAAKT,KAAKmB,WAAWQ,KAAK,aAAc3B,KAAKmB,WAG1EnB,KAAKgI,YAAYhI,KAAKa,EAAGb,KAAKc,GAC9Bd,KAAKuH,iBAAgB,GACrBvH,KAAKe,GAAG6C,SAAS,kBACpB,EAMDhD,EAAKyC,UAAU2E,YAAc,SAAUC,EAAMC,GACzClI,KAAKa,EAAIoH,EACTjI,KAAKc,EAAIoH,EACTlI,KAAKX,KAAKc,MAAM8H,GAAMC,GAAMzF,WAAWK,KAAK9C,KAC/C,EAMDY,EAAKyC,UAAU8E,kBAAoB,SAAUF,EAAMC,GAC/ClI,KAAKX,KAAKc,MAAM8H,GAAMC,GAAMzF,WAAWC,KAC1C,EAMD9B,EAAKyC,UAAUkE,gBAAkB,SAAUa,GACvC,IAAInE,EAAOjE,KACPqI,EAAWrI,KAAKa,GAAK,IAAMb,KAAKX,KAAKY,MACrCqI,EAAUtI,KAAKc,GAAK,IAAMd,KAAKX,KAAKa,SAGpCqI,EAAa/H,EAAEgI,WAQnB,SAASC,IACLF,EAAWG,UACXzE,EAAKlD,GAAG4H,YAAY,WACpB1E,EAAKlD,GAAG4H,YAAY,aACvB,CAED,SAASX,IACL/D,EAAKlD,GAAG6H,SAAS,WACjB3E,EAAKlD,GAAGY,KAAK,CACT,SAAU0G,EACV,SAAUC,GAGjB,CASD,OA5BIF,EACApI,KAAKe,GAAG6H,SAAS,cAEjB5I,KAAKe,GAAG4H,YAAY,cAkBpBP,GACAJ,IACA5I,OAAOkH,WAAWmC,EAAgBI,OAElCb,IACA5I,OAAOkH,WAAWmC,EA7BE,MA+BjBF,CACV,EAMD3H,EAAKyC,UAAUwD,UAAY,WAEvB,OACI7G,KAAK6E,KAAK,MAAM,IAChB7E,KAAK6E,KAAK,SAAS,IACnB7E,KAAK6E,KAAK,QAAQ,IAClB7E,KAAK6E,KAAK,QAAQ,IAClB7E,KAAK4B,SAAU,GACR,IAEP5B,KAAK4B,SAAU,GACR,EAEd,EAMDhB,EAAKyC,UAAUwB,KAAO,SAAU8C,EAAcmB,GACtCA,IAAYA,EAAhB,IAKIC,EACAC,EACAC,EANAxE,EAAYkD,EAAaC,cACzBK,EAAOjI,KAAKa,EACZqH,EAAOlI,KAAKc,EAKZoI,EAAoB,GA4BxB,GAzBkB,OAAdzE,GACAsE,EAAU/I,KAAKc,EAAI,GAAId,KAAKX,KAAKc,MAAMH,KAAKa,GAAGb,KAAKc,EAAI,GACxDoI,EAAkBpG,KAAK9C,KAAKa,EAAGb,KAAKc,EAAI,IACnB,UAAd2D,GAEPsE,EAAU/I,KAAKa,EAAI,GAAIb,KAAKX,KAAKc,MAAMH,KAAKa,EAAI,GAAGb,KAAKc,GACxDoI,EAAkBpG,KAAK9C,KAAKa,EAAI,EAAGb,KAAKc,IACnB,SAAd2D,GAEPsE,EAAU/I,KAAKc,EAAI,GAAId,KAAKX,KAAKc,MAAMH,KAAKa,GAAGb,KAAKc,EAAI,GACxDoI,EAAkBpG,KAAK9C,KAAKa,EAAGb,KAAKc,EAAI,IACnB,SAAd2D,IAEPsE,EAAU/I,KAAKa,EAAI,GAAIb,KAAKX,KAAKc,MAAMH,KAAKa,EAAI,GAAGb,KAAKc,GACxDoI,EAAkBpG,KAAK9C,KAAKa,EAAI,EAAGb,KAAKc,IAG5CkI,EACID,GAC8B,IAA9BA,EAAQtG,WAAW4C,QACnB0D,EAAQtG,WAAW,GAAGtB,YAAcnB,KAAKmB,UAC7C8H,EAAcF,GAAyC,IAA9BA,EAAQtG,WAAW4C,OAIxCyD,EACA,SAAOG,IAAeD,IACfC,GAAeD,KAEtBhJ,KAAKgI,YAAYkB,EAAkB,GAAIA,EAAkB,IACzDlJ,KAAKmI,kBAAkBF,EAAMC,GAExBc,GACDhJ,KAAK6E,KAAKJ,GAGrB,C","sources":["webpack:///./src/script.js"],"sourcesContent":["import \"./style.css\";\n\n/**\n * TODO:\n * - Style win/lose, move out of \"alert\"\n * - Add in previous high score via localstorage\n * - Update footer\n */\n\n/*\n* Dependencies:\n* Lodash, jQuery, hammerjs\n*/\n\n\n/*\nDel all tile where value === 2\n*/\nfunction delAllLowTiles(){\n  let lowCells = window.game.getAllLowTiles();\n  let cellToDel = [];\n\n  lowCells.forEach((cell) => {\n    window.game.board[cell.x][cell.y].tilesArray.pop();\n    let temp = document.querySelectorAll(`[data-x=\"${cell.x * 25}\"]`);\n    temp.forEach((item) => {\n      if(item.getAttribute('data-y') === `${cell.y * 25}`){\n        cellToDel.push(item);\n      }\n    })\n  })\n\n  cellToDel.forEach((cell) => {\n    cell.remove();\n  })\n\n  window.game.initTile();\n}\n\n\nlet btnNew = document.querySelector('.popup__body--btn__new')\nbtnNew.onclick = () => {\n    tgames.showRewardedAd('default', 5, 1);\n    gameStart();\n    tgames.gameStarted();\n}\n\nlet btnShare = document.querySelector('.popup__body--btn__share')\nbtnShare.onclick = () => {\n    tgames.share();\n}\n\nlet btnRestart = document.querySelector('.popup__body--btn__restart')\nbtnRestart.onclick = () => {\n    tgames.gameOver(game.score)\n    tgames.showRewardedAd('default', 5, 1);\n    gameStart();\n    tgames.gameStarted();\n}\n\nlet btnStart = document.querySelector('.popup__body--btn__start')\nbtnStart.onclick = () => {\n    gameStart();\n    tgames.gameStarted();\n    let popupStart = document.querySelector('.popup__start');\n    popupStart.style.display = 'none';\n}\n\nlet btnSkip = document.querySelector('.popup__body--btn__skip')\nbtnSkip.onclick = () => {\n    window.game.endGame()\n}\n\nlet btnContinue = document.querySelector('.popup__body--btn__continue');\nbtnContinue.onclick = () => {\n    tgames.showRewardedAd( 'default', 15, 2);\n    delAllLowTiles();\n    clearTimeout(window.game.adsTimeout);\n    let popupContinue = document.querySelector('.popup__continue');\n    popupContinue.style.display = 'none';\n}\n\nfunction gameStart() {\n    window.game = new Game(4);\n    window.game.initialize();\n    let popup = document.querySelector('.popup');\n    console.log(popup);\n    popup.style.display = 'none';\n    let popupStart = document.querySelector('.popup__continue');\n    popupStart.style.display = 'none';\n}\n\n$(document).ready(gameStart);\n\n/*\n   * Game Board\n   */\nfunction Game(size) {\n    this.rows = size;\n    this.columns = size;\n    // board is set as 2d array, with grid cell object for each position\n    this.board = [];\n    this.boardFlatten = function () {\n        return _.flatten(this.board);\n    };\n    //\n    // score setup\n    this.score = 0;\n    $('[data-js=\"score\"]').html(this.score.toString());\n    //\n    // flag to check whether any tile movement is in progress;\n    this.moveInProgress = false;\n    //\n}\n\n/**\n * Run all initializations\n */\nGame.prototype.initialize = function () {\n    // clear any previous grid; per jQuery docs, empty also removes event listeners\n    $(\".grid\").empty();\n    $(\".tile-container\").empty();\n    //\n    // run new setup\n    this.initBoard();\n    this.initTile();\n    this.initEventListeners();\n    //\n};\n/**/\n\n/**\n * Initialize grid\n */\nGame.prototype.initBoard = function () {\n    // return grid cell object\n    function initGridCell(x, y) {\n        var getGridCell = $.parseHTML($(\"#template_grid_cell\").html());\n        $(getGridCell).appendTo(\".grid\");\n        return {\n            x: x,\n            y: y,\n            tilesArray: []\n        };\n    }\n    \n    //\n    // create 2d array and push grid cell object\n    for (var x = 0; x < this.rows; x++) {\n        var newArray = [];\n        this.board.push(newArray);\n        for (var y = 0; y < this.columns; y++) {\n            var gridObj = initGridCell(x, y);\n            var rowCell = this.board[x];\n            rowCell.push(gridObj);\n        }\n    }\n    //\n};\n\n/**\n * Initialize tiles\n */\nGame.prototype.initTile = function () {\n    // isGameOver determines whether the game is finished; needs to be run: before and after creating tile\n    this.isGameOver();\n    //\n    var emptyCell = this.getRandomEmptyCell();\n    var tile = new Tile(emptyCell.x, emptyCell.y, game);\n    // isGameOver determines whether the game is finished; needs to be run: before and after creating tile\n    this.isGameOver();\n    //\n};\n/**/\n\n/**\n * Set event listeners\n */\nGame.prototype.initEventListeners = function () {\n    var self = this;\n    var getGameboard = document.getElementById(\"touchGameboard\");\n\n    /*\n           Touch events with Hammerjs\n       */\n    window.hammertime && window.hammertime.destroy();\n    window.hammertime = new Hammer(getGameboard, {\n        recognizers: [[Hammer.Swipe, {direction: Hammer.DIRECTION_ALL}]]\n    });\n\n    window.hammertime.on(\"swipeleft\", function (ev) {\n        self.move(\"left\");\n    }).on(\"swiperight\", function (ev) {\n        self.move(\"right\");\n    }).on(\"swipedown\", function (ev) {\n        self.move(\"down\");\n    }).on(\"swipeup\", function (ev) {\n        self.move(\"up\");\n    });\n    /**/\n\n    /*\n           NOTE: Remove event listeners before applying new listeners,\n           because this initialization runs each time a new game is created\n       */\n    // keypress events for up, down, left, right\n    $(document).off(\"keydown.move\").on(\"keydown.move\", function (event) {\n        event.preventDefault();\n        switch (event.which) {\n            // left\n            case 37:\n                self.move(\"left\");\n                break;\n            // up\n            case 38:\n                self.move(\"up\");\n                break;\n            // right\n            case 39:\n                self.move(\"right\");\n                break;\n            // down\n            case 40:\n                self.move(\"down\");\n                break;\n        }\n\n    });\n    //\n    // New game click handler\n    $('[data-js=\"newGame\"]').off(\"click.newGame\").on(\"click.newGame\", window.gameStart);\n    //\n};\n/**/\n\n/**\n * Game is WON!\n */\nGame.prototype.gameWon = function () {\n    let tile = document.getElementsByClassName('tile')\n    while (tile.length > 0) {\n        tile[0].parentNode.removeChild(tile[0]);\n    }\n    let popup = document.querySelector('.popup');\n    popup.style.display = 'flex';\n    alert(\"you won\");\n    tgames.gameOver(game.score)\n};\n/**/\n\n/**\n * Game is LOST!\n */\n\n\n\n\nGame.prototype.getMaxTile = function () {\n    let gameBoard = this.boardFlatten();\n    let temp = -Infinity;\n\n    gameBoard.forEach((item) => {\n        if (item.tilesArray.length !== 0) {\n            if (item.tilesArray[0].valueProp > temp) {\n                temp = item.tilesArray[0].valueProp\n            }\n        }\n    });\n\n    return temp;\n}\n\n\nGame.prototype.createBlock = function(val){\n    let container = document.querySelector('.info__tile--block')\n    let block = document.createElement('div', )\n    block.className = 'tile';\n    block.innerHTML = `<span class=\"tile_number\" data-value=${val}>${val}</span>`\n    container.appendChild(block)\n}\n\n\nGame.prototype.endGame = function (){\n\n    let popupRestart = document.querySelector('.popup__restart')\n    let popup = document.querySelector('.popup__continue');\n\n    popup.style.display = 'none';\n    popupRestart.style.display = 'flex';\n\n    let maxVal = this.getMaxTile()\n\n    let tile = document.getElementsByClassName('tile')\n    while (tile.length > 0) {\n        tile[0].parentNode.removeChild(tile[0]);\n    }\n\n    this.createBlock(maxVal);\n    let scoreElement = document.querySelector('.info__score--value');\n    scoreElement.innerHTML = `${this.score}`;\n\n    tgames.gameOver(game.score);\n    //alert('What a loser?!')\n    clearTimeout(this.adsTimeout);\n}\n\n\nGame.prototype.gameLost = function () {\n    let popup = document.querySelector('.popup__continue');\n    popup.style.display = 'flex';\n    this.adsTimeout = setTimeout(() => {\n       this.endGame()\n    }, 8000);\n};\n/**/\n\n/**\n * Check if game over\n */\nGame.prototype.isGameOver = function () {\n    var gameBoard = this.boardFlatten();\n\n    var is2048 = false;\n    var canAnyTileMove = false;\n    var hasEmptyCells = false;\n    // check if 2048\n    gameBoard.forEach(function (val, index, array) {\n        val.tilesArray.forEach(function (val, index, array) {\n            if (val.valueProp === 131072) {\n                is2048 = true;\n            }\n        });\n    });\n    // check if there are empty cells\n    if (this.getEmptyCells().length > 0) {\n        hasEmptyCells = true;\n    }\n    // Check if move possible\n    gameBoard.forEach(function (val, index, array) {\n        val.tilesArray.forEach(function (val, index, array) {\n            val.moveCheck();\n            if (val.canMove === true) {\n                canAnyTileMove = true;\n            }\n        });\n    });\n\n    // if game won\n    if (is2048) {\n        this.gameWon();\n        return true;\n    } else if (!hasEmptyCells && !canAnyTileMove) {\n        // if no empty cells || no tile can move, the game is lost\n        this.gameLost();\n        return true;\n    } else {\n        // if there is an empty || a tile can move, return false for isGameOver\n        return false;\n    }\n    //\n};\n\n/**\n * Get empty cells\n */\nGame.prototype.getEmptyCells = function () {\n    var emptyCells = _.filter(this.boardFlatten(), function (val) {\n        return !val.tilesArray.length;\n    });\n    return emptyCells;\n};\n/**/\n\n/**\n * Return random empty cell for new tile creation\n */\nGame.prototype.getRandomEmptyCell = function () {\n    var emptyGridCells = this.getEmptyCells();\n    var randomIndex = Math.floor(\n        Math.random() * Math.floor(emptyGridCells.length));\n\n\n    return emptyGridCells[randomIndex];\n};\n/**/\n\n/**\n * Merge tiles\n */\n\n\n\n/*\nReturns all tiles where value === 2\n*/\nGame.prototype.getAllLowTiles = function () {\n    let gameBoard = this.boardFlatten();\n    let cells = [];\n\n    gameBoard.forEach((item) => {\n        if (item.tilesArray.length !== 0) {\n            if (item.tilesArray[0].valueProp === 2) {\n                cells.push({x: item.tilesArray[0].x, y: item.tilesArray[0].y})\n            }\n        }\n    });\n\n    return cells;\n}\n\n\n/*Tile.prototype.initialize = function () {\n    // Get html from template and set number text\n    var getTile = $.parseHTML($(\"#template_tile\").html());\n    this.el = $(getTile);\n    this.el.find(\".tile_number\").html(this.valueProp).attr(\"data-value\", this.valueProp);\n\n    // Set position and append to page; initializeFlag is set to True to remove animation and append immediately in correct position\n    this.setPosition(this.x, this.y);\n    this.animatePosition(true);\n    this.el.appendTo(\".tile-container\");\n};*/\n\n\n\n\nGame.prototype.TileMerge = function () {\n    var gameBoard = this.boardFlatten();\n    var newScore = this.score;\n    //console.log(gameBoard[0].tilesArray);\n    // loop through all tiles\n    gameBoard.forEach(function (val, index, array) {\n        if (val.tilesArray.length === 2) {\n            // get current value of 1st tile\n            var currentValue = val.tilesArray[0].valueProp;\n            // update value\n            val.tilesArray[0].value = currentValue * 2;\n            // remove 2nd tile\n            var x = val.tilesArray.pop();\n            x.el.remove();\n            // update score\n            newScore += currentValue;\n            tgames.setScore(newScore)\n            //alert( newScore )\n        }\n    });\n    // update game score at the end\n    this.score = newScore;\n    $('[data-js=\"score\"]').html(this.score.toString());\n};\n/**/\n\n/**\n * Move animations\n */\nGame.prototype.moveAnimations = function (gameBoard) {\n    var self = this;\n    var promiseArray = [];\n\n    if (this.moveInProgress) {\n        return false;\n    }\n\n    this.moveInProgress = true;\n    gameBoard.forEach(function (val, index, array) {\n        val.tilesArray.forEach(function (val, index, array) {\n            promiseArray.push(val.animatePosition());\n        });\n    });\n\n    $.when.apply($, promiseArray).then(function () {\n        self.moveInProgress = false;\n        self.TileMerge();\n        self.initTile();\n    });\n    if (promiseArray.length === 0) {\n        self.moveInProgress = false;\n        self.TileMerge();\n        self.initTile();\n    }\n};\n/**/\n\n/**\n * Move logic\n */\n\nGame.prototype.move = function (getDirection) {\n    var gameBoard;\n\n    // direction passed as argument\n    var direction = getDirection.toLowerCase();\n    //\n    // flag to check whether any\n    var hasAnyTileMoved = false;\n    //\n    if (this.moveInProgress) {\n        return false;\n    }\n\n    // if UP:\n    if (direction === \"up\") {\n        gameBoard = _.orderBy(this.boardFlatten(), \"y\", \"asc\");\n    } else if (direction === \"right\") {\n        // if RIGHT:\n        gameBoard = _.orderBy(this.boardFlatten(), \"x\", \"desc\");\n    } else if (direction === \"down\") {\n        // if DOWN\n        gameBoard = _.orderBy(this.boardFlatten(), \"y\", \"desc\");\n    } else if (direction === \"left\") {\n        // if LEFT\n        gameBoard = _.orderBy(this.boardFlatten(), \"y\", \"asc\");\n    }\n\n    // loop through all tiles and run tile move foreach\n    //\n    gameBoard.forEach(function (val, index, array) {\n        val.tilesArray.length ?\n            val.tilesArray.forEach(function (val) {\n                if (val.move(direction, true)) {\n                    hasAnyTileMoved = true;\n                    val.move(direction);\n                }\n            }) :\n            false;\n    });\n    //\n    // run animation logic at the end\n    hasAnyTileMoved ? this.moveAnimations(gameBoard) : false;\n};\n/**/\n\n/*\n   * Tile\n   */\n\n\nfunction getRandomInt(max) {\n    return Math.floor(Math.random() * max);\n}\n\nfunction Tile(x, y, game) {\n    this.game = game;\n\n    // jQuery element\n    this.el;\n    // current position\n    this.x = x;\n    this.y = y;\n    // Getter/Setter for value; updates html on set; defaulted to 2 on creation\n    if (getRandomInt(10) === 4) {\n        this.valueProp = 4;\n    } else {\n        this.valueProp = 2;\n    }\n\n    Object.defineProperties(this, {\n        value: {\n            get: function () {\n                return this.valueProp;\n            },\n            set: function (val) {\n                this.valueProp = val;\n                this.el.find(\".tile_number\").html(this.valueProp).attr(\"data-value\", val);\n            }\n        }\n    });\n\n\n    // can move flag\n    this.canMove = false;\n    // initialize\n    this.initialize();\n}\n\n/**\n * Initialize\n */\nTile.prototype.initialize = function () {\n    // Get html from template and set number text\n    var getTile = $.parseHTML($(\"#template_tile\").html());\n    this.el = $(getTile);\n    this.el.find(\".tile_number\").html(this.valueProp).attr(\"data-value\", this.valueProp);\n\n    // Set position and append to page; initializeFlag is set to True to remove animation and append immediately in correct position\n    this.setPosition(this.x, this.y);\n    this.animatePosition(true);\n    this.el.appendTo(\".tile-container\");\n};\n\n\n/**\n * Set new position\n */\nTile.prototype.setPosition = function (getX, getY) {\n    this.x = getX;\n    this.y = getY;\n    this.game.board[getX][getY].tilesArray.push(this);\n};\n/**/\n\n/**\n * Remove old position\n */\nTile.prototype.removeOldPosition = function (getX, getY) {\n    this.game.board[getX][getY].tilesArray.pop();\n};\n/**/\n\n/**\n * Animate to position\n */\nTile.prototype.animatePosition = function (initalizeFlag) {\n    var self = this;\n    var fromLeft = this.x * (100 / this.game.rows);\n    var fromTop = this.y * (100 / this.game.columns);\n    // Initialize flag sets animationDuration to 0 to append immediately in correct position\n    var animationDuration = 175;\n    var getPromise = $.Deferred();\n\n    if (initalizeFlag) {\n        this.el.addClass(\"initialize\");\n    } else {\n        this.el.removeClass(\"initialize\");\n    }\n\n    function resolvePromise() {\n        getPromise.resolve();\n        self.el.removeClass(\"animate\");\n        self.el.removeClass(\"initialize\");\n    }\n\n    function setPosition() {\n        self.el.addClass(\"animate\");\n        self.el.attr({\n            \"data-x\": fromLeft,\n            \"data-y\": fromTop\n        });\n\n    }\n\n    if (initalizeFlag) {\n        setPosition();\n        window.setTimeout(resolvePromise, animationDuration + 50);\n    } else {\n        setPosition();\n        window.setTimeout(resolvePromise, animationDuration);\n    }\n    return getPromise;\n};\n/**/\n\n/**\n * Check if move is possible\n */\nTile.prototype.moveCheck = function () {\n    // run all checks; return true if any moves are possible\n    if (\n        this.move(\"up\", true) ||\n        this.move(\"right\", true) ||\n        this.move(\"down\", true) ||\n        this.move(\"left\", true)) {\n        this.canMove = true;\n        return true;\n    } else {\n        this.canMove = false;\n        return false;\n    }\n};\n/**/\n\n/**\n * Move logic\n */\nTile.prototype.move = function (getDirection, checkFlag) {\n    var checkFlag = checkFlag ? true : false;\n    var direction = getDirection.toLowerCase();\n    var getX = this.x;\n    var getY = this.y;\n\n    var getNext;\n    var isNextMatch;\n    var isNextEmpty;\n    var nextPositionArray = [];\n\n    // if UP: check next position\n    if (direction === \"up\") {\n        getNext = this.y > 0 ? this.game.board[this.x][this.y - 1] : false;\n        nextPositionArray.push(this.x, this.y - 1);\n    } else if (direction === \"right\") {\n        // if RIGHT: check next position\n        getNext = this.x < 3 ? this.game.board[this.x + 1][this.y] : false;\n        nextPositionArray.push(this.x + 1, this.y);\n    } else if (direction === \"down\") {\n        // if DOWN: check next position\n        getNext = this.y < 3 ? this.game.board[this.x][this.y + 1] : false;\n        nextPositionArray.push(this.x, this.y + 1);\n    } else if (direction === \"left\") {\n        // if LEFT: check next position\n        getNext = this.x > 0 ? this.game.board[this.x - 1][this.y] : false;\n        nextPositionArray.push(this.x - 1, this.y);\n    }\n    // Check if next position contains match or is empty\n    isNextMatch =\n        getNext &&\n        getNext.tilesArray.length === 1 &&\n        getNext.tilesArray[0].valueProp === this.valueProp;\n    isNextEmpty = getNext && getNext.tilesArray.length === 0;\n    //\n\n    // \"check only\" mode; only to check if tile can move\n    if (checkFlag) {\n        return isNextEmpty || isNextMatch ? true : false;\n    } else if (isNextEmpty || isNextMatch) {\n        // not \"check only\" mode; will actually run move logic\n        this.setPosition(nextPositionArray[0], nextPositionArray[1]);\n        this.removeOldPosition(getX, getY);\n        // do NOT continue to move if a tile has matched - and therefore MERGED into adjoining tile\n        if (!isNextMatch) {\n            this.move(direction);\n        }\n    }\n};\n/**/"],"names":["gameStart","window","game","Game","initialize","popup","document","querySelector","console","log","style","display","size","this","rows","columns","board","boardFlatten","_","flatten","score","$","html","toString","moveInProgress","Tile","x","y","el","Math","floor","random","valueProp","Object","defineProperties","value","get","set","val","find","attr","canMove","onclick","tgames","showRewardedAd","gameStarted","share","gameOver","endGame","lowCells","getAllLowTiles","cellToDel","forEach","cell","tilesArray","pop","querySelectorAll","item","getAttribute","push","remove","initTile","delAllLowTiles","clearTimeout","adsTimeout","ready","prototype","empty","initBoard","initEventListeners","initGridCell","getGridCell","parseHTML","appendTo","gridObj","isGameOver","emptyCell","getRandomEmptyCell","self","getGameboard","getElementById","hammertime","destroy","Hammer","recognizers","Swipe","direction","DIRECTION_ALL","on","ev","move","off","event","preventDefault","which","gameWon","tile","getElementsByClassName","length","parentNode","removeChild","alert","getMaxTile","gameBoard","temp","createBlock","container","block","createElement","className","innerHTML","appendChild","popupRestart","maxVal","gameLost","setTimeout","is2048","canAnyTileMove","hasEmptyCells","index","array","getEmptyCells","moveCheck","filter","emptyGridCells","cells","TileMerge","newScore","currentValue","setScore","moveAnimations","promiseArray","animatePosition","when","apply","then","getDirection","toLowerCase","hasAnyTileMoved","orderBy","getTile","setPosition","getX","getY","removeOldPosition","initalizeFlag","fromLeft","fromTop","getPromise","Deferred","resolvePromise","resolve","removeClass","addClass","animationDuration","checkFlag","getNext","isNextMatch","isNextEmpty","nextPositionArray"],"sourceRoot":""}