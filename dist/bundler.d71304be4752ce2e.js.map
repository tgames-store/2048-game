{"version":3,"file":"bundler.d71304be4752ce2e.js","mappings":"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","sources":["webpack:///./src/script.js"],"sourcesContent":["import \"./style.css\";\n\n/**\n * TODO:\n * - Style win/lose, move out of \"alert\"\n * - Add in previous high score via localstorage\n * - Update footer\n */\n\n/*\n* Dependencies:\n* Lodash, jQuery, hammerjs\n*/\n\n\nlet btnNew = document.querySelector('.popup__body--btn__new')\nbtnNew.onclick = () => {\n  tgames.showRewardedAd();\n  gameStart();\n}\n\nlet btnShare = document.querySelector('.popup__body--btn__share')\nbtnShare.onclick = () => {\n  tgames.share();\n}\n\nlet btnRestart = document.querySelector('.popup__body--btn__restart')\nbtnRestart.onclick = () => {\n  tgames.gameOver( game.score )\n  tgames.showRewardedAd();\n  //alert('Ad')\n  gameStart();\n}\n\nlet btnStart = document.querySelector('.popup__body--btn__start')\nbtnStart.onclick = () => {\n  gameStart();\n  let popupStart = document.querySelector('.popup__start');\n  popupStart.style.display = 'none';\n}\n\nfunction gameStart() {\n  window.game = new Game(4);\n  window.game.initialize();\n  let popup = document.querySelector('.popup');\n  popup.style.display = 'none';\n  game.flag = true;\n}\n$(document).ready(gameStart);\n\n/*\n   * Game Board\n   */\nfunction Game(size) {\n  this.rows = size;\n  this.columns = size;\n  // board is set as 2d array, with grid cell object for each position\n  this.board = [];\n  this.boardFlatten = function () {\n    return _.flatten(this.board);\n  };\n  //\n  // score setup\n  this.score = 0;\n  $('[data-js=\"score\"]').html(this.score.toString());\n  //\n  // flag to check whether any tile movement is in progress;\n  this.moveInProgress = false;\n  //\n}\n\n/**\n * Run all initializations\n */\nGame.prototype.initialize = function () {\n  // clear any previous grid; per jQuery docs, empty also removes event listeners\n  $(\".grid\").empty();\n  $(\".tile-container\").empty();\n  //\n  // run new setup\n  this.initBoard();\n  this.initTile();\n  this.initEventListeners();\n  //\n};\n/**/\n\n/**\n * Initialize grid\n */\nGame.prototype.initBoard = function () {\n  // return grid cell object\n  function initGridCell(x, y) {\n    var getGridCell = $.parseHTML($(\"#template_grid_cell\").html());\n    $(getGridCell).appendTo(\".grid\");\n    return {\n      x: x,\n      y: y,\n      tilesArray: [] };\n  }\n  //\n  // create 2d array and push grid cell object\n  for (var x = 0; x < this.rows; x++) {\n    var newArray = [];\n    this.board.push(newArray);\n    for (var y = 0; y < this.columns; y++) {\n      var gridObj = initGridCell(x, y);\n      var rowCell = this.board[x];\n      rowCell.push(gridObj);\n    }\n  }\n  //\n};\n\n/**\n * Initialize tiles\n */\nGame.prototype.initTile = function () {\n  // isGameOver determines whether the game is finished; needs to be run: before and after creating tile\n  this.isGameOver();\n  //\n  var emptyCell = this.getRandomEmptyCell();\n  var tile = new Tile(emptyCell.x, emptyCell.y, game);\n  // isGameOver determines whether the game is finished; needs to be run: before and after creating tile\n  this.isGameOver();\n  //\n};\n/**/\n\n/**\n * Set event listeners\n */\nGame.prototype.initEventListeners = function () {\n  var self = this;\n  var getGameboard = document.getElementById(\"touchGameboard\");\n\n  /*\n         Touch events with Hammerjs\n     */\n  window.hammertime && window.hammertime.destroy();\n  window.hammertime = new Hammer(getGameboard, {\n    recognizers: [[Hammer.Swipe, { direction: Hammer.DIRECTION_ALL }]] });\n\n  window.hammertime.\n  on(\"swipeleft\", function (ev) {\n    self.move(\"left\");\n  }).\n  on(\"swiperight\", function (ev) {\n    self.move(\"right\");\n  }).\n  on(\"swipedown\", function (ev) {\n    self.move(\"down\");\n  }).\n  on(\"swipeup\", function (ev) {\n    self.move(\"up\");\n  });\n  /**/\n\n  /*\n         NOTE: Remove event listeners before applying new listeners,\n         because this initialization runs each time a new game is created\n     */\n  // keypress events for up, down, left, right\n  $(document).\n  off(\"keydown.move\").\n  on(\"keydown.move\", function (event) {\n    event.preventDefault();\n    switch (event.which) {\n      // left\n      case 37:\n        self.move(\"left\");\n        break;\n      // up\n      case 38:\n        self.move(\"up\");\n        break;\n      // right\n      case 39:\n        self.move(\"right\");\n        break;\n      // down\n      case 40:\n        self.move(\"down\");\n        break;}\n\n  });\n  //\n  // New game click handler\n  $('[data-js=\"newGame\"]').\n  off(\"click.newGame\").\n  on(\"click.newGame\", window.gameStart);\n  //\n};\n/**/\n\n/**\n * Game is WON!\n */\nGame.prototype.gameWon = function () {\n  let tile = document.getElementsByClassName('tile')\n  while(tile.length > 0){\n    tile[0].parentNode.removeChild(tile[0]);\n  }\n  let popup = document.querySelector('.popup');\n  popup.style.display = 'flex';\n  alert(\"you won\");\n  tgames.gameOver( game.score )\n  //tgames.showRewardedAd();\n};\n/**/\n\n/**\n * Game is LOST!\n */\nGame.prototype.gameLost = function () {\n  let tile = document.getElementsByClassName('tile')\n  while(tile.length > 0){\n    tile[0].parentNode.removeChild(tile[0]);\n  }\n  let popup = document.querySelector('.popup');\n  popup.style.display = 'flex';\n  tgames.gameOver( game.score )\n  //tgames.showRewardedAd();\n  alert('What a loser?!')\n\n};\n/**/\n\n/**\n * Check if game over\n */\nGame.prototype.isGameOver = function () {\n  var gameBoard = this.boardFlatten();\n\n  var is2048 = false;\n  var canAnyTileMove = false;\n  var hasEmptyCells = false;\n  // check if 2048\n  gameBoard.forEach(function (val, index, array) {\n    val.tilesArray.forEach(function (val, index, array) {\n      if (val.valueProp === 131072) {\n        is2048 = true;\n      }\n    });\n  });\n  // check if there are empty cells\n  if (this.getEmptyCells().length > 0) {\n    hasEmptyCells = true;\n  }\n  // Check if move possible\n  gameBoard.forEach(function (val, index, array) {\n    val.tilesArray.forEach(function (val, index, array) {\n      val.moveCheck();\n      if (val.canMove === true) {\n        canAnyTileMove = true;\n      }\n    });\n  });\n\n  // if game won\n  if (is2048) {\n    this.gameWon();\n    return true;\n  } else if (!hasEmptyCells && !canAnyTileMove) {\n    // if no empty cells || no tile can move, the game is lost\n    this.gameLost();\n    return true;\n  } else {\n    // if there is an empty || a tile can move, return false for isGameOver\n    return false;\n  }\n  //\n};\n\n/**\n * Get empty cells\n */\nGame.prototype.getEmptyCells = function () {\n  var emptyCells = _.filter(this.boardFlatten(), function (val) {\n    return !val.tilesArray.length;\n  });\n  return emptyCells;\n};\n/**/\n\n/**\n * Return random empty cell for new tile creation\n */\nGame.prototype.getRandomEmptyCell = function () {\n  var emptyGridCells = this.getEmptyCells();\n  var randomIndex = Math.floor(\n  Math.random() * Math.floor(emptyGridCells.length));\n\n\n  return emptyGridCells[randomIndex];\n};\n/**/\n\n/**\n * Merge tiles\n */\nGame.prototype.TileMerge = function () {\n  if(game.flag){\n    tgames.gameStarted();\n    game.flag = false\n  }\n  var gameBoard = this.boardFlatten();\n  var newScore = this.score;\n\n  // loop through all tiles\n  gameBoard.forEach(function (val, index, array) {\n    if (val.tilesArray.length === 2) {\n      // get current value of 1st tile\n      var currentValue = val.tilesArray[0].valueProp;\n      // update value\n      val.tilesArray[0].value = currentValue * 2;\n      // remove 2nd tile\n      var x = val.tilesArray.pop();\n      x.el.remove();\n      // update score\n      newScore += currentValue;\n      tgames.setScore( newScore )\n      //alert( newScore )\n    }\n  });\n  // update game score at the end\n  this.score = newScore;\n  $('[data-js=\"score\"]').html(this.score.toString());\n};\n/**/\n\n/**\n * Move animations\n */\nGame.prototype.moveAnimations = function (gameBoard) {\n  var self = this;\n  var promiseArray = [];\n\n  if (this.moveInProgress) {\n    return false;\n  }\n\n  this.moveInProgress = true;\n  gameBoard.forEach(function (val, index, array) {\n    val.tilesArray.forEach(function (val, index, array) {\n      promiseArray.push(val.animatePosition());\n    });\n  });\n\n  $.when.apply($, promiseArray).then(function () {\n    self.moveInProgress = false;\n    self.TileMerge();\n    self.initTile();\n  });\n  if (promiseArray.length === 0) {\n    self.moveInProgress = false;\n    self.TileMerge();\n    self.initTile();\n  }\n};\n/**/\n\n/**\n * Move logic\n */\nGame.prototype.move = function (getDirection) {\n  var gameBoard;\n  // direction passed as argument\n  var direction = getDirection.toLowerCase();\n  //\n  // flag to check whether any\n  var hasAnyTileMoved = false;\n  //\n  if (this.moveInProgress) {\n    return false;\n  }\n\n  // if UP:\n  if (direction === \"up\") {\n    gameBoard = _.orderBy(this.boardFlatten(), \"y\", \"asc\");\n  } else if (direction === \"right\") {\n    // if RIGHT:\n    gameBoard = _.orderBy(this.boardFlatten(), \"x\", \"desc\");\n  } else if (direction === \"down\") {\n    // if DOWN\n    gameBoard = _.orderBy(this.boardFlatten(), \"y\", \"desc\");\n  } else if (direction === \"left\") {\n    // if LEFT\n    gameBoard = _.orderBy(this.boardFlatten(), \"y\", \"asc\");\n  }\n\n  // loop through all tiles and run tile move foreach\n  //\n  gameBoard.forEach(function (val, index, array) {\n    val.tilesArray.length ?\n    val.tilesArray.forEach(function (val) {\n      if (val.move(direction, true)) {\n        hasAnyTileMoved = true;\n        val.move(direction);\n      }\n    }) :\n    false;\n  });\n  //\n  // run animation logic at the end\n  hasAnyTileMoved ? this.moveAnimations(gameBoard) : false;\n};\n/**/\n\n/*\n   * Tile\n   */\n\n\nfunction getRandomInt(max) {\n  return Math.floor(Math.random() * max);\n}\n\nfunction Tile(x, y, game) {\n  this.game = game;\n\n  // jQuery element\n  this.el;\n  // current position\n  this.x = x;\n  this.y = y;\n  // Getter/Setter for value; updates html on set; defaulted to 2 on creation\n  if(getRandomInt(10) === 4){\n    this.valueProp = 4;\n  }else{\n    this.valueProp = 2;\n  }\n\n  Object.defineProperties(this, {\n    value: {\n      get: function () {\n        return this.valueProp;\n      },\n      set: function (val) {\n        this.valueProp = val;\n        this.el.\n        find(\".tile_number\").\n        html(this.valueProp).\n        attr(\"data-value\", val);\n      } } });\n\n\n  // can move flag\n  this.canMove = false;\n  // initialize\n  this.initialize();\n}\n\n/**\n * Initialize\n */\nTile.prototype.initialize = function () {\n  // Get html from template and set number text\n  var getTile = $.parseHTML($(\"#template_tile\").html());\n  this.el = $(getTile);\n  this.el.\n  find(\".tile_number\").\n  html(this.valueProp).\n  attr(\"data-value\", this.valueProp);\n\n  // Set position and append to page; initializeFlag is set to True to remove animation and append immediately in correct position\n  this.setPosition(this.x, this.y);\n  this.animatePosition(true);\n  this.el.appendTo(\".tile-container\");\n};\n/**/\n\n/**\n * Set new position\n */\nTile.prototype.setPosition = function (getX, getY) {\n  this.x = getX;\n  this.y = getY;\n  this.game.board[getX][getY].tilesArray.push(this);\n};\n/**/\n\n/**\n * Remove old position\n */\nTile.prototype.removeOldPosition = function (getX, getY) {\n  this.game.board[getX][getY].tilesArray.pop();\n};\n/**/\n\n/**\n * Animate to position\n */\nTile.prototype.animatePosition = function (initalizeFlag) {\n  var self = this;\n  var fromLeft = this.x * (100 / this.game.rows);\n  var fromTop = this.y * (100 / this.game.columns);\n  // Initialize flag sets animationDuration to 0 to append immediately in correct position\n  var animationDuration = 175;\n  var getPromise = $.Deferred();\n\n  if (initalizeFlag) {\n    this.el.addClass(\"initialize\");\n  } else {\n    this.el.removeClass(\"initialize\");\n  }\n\n  function resolvePromise() {\n    getPromise.resolve();\n    self.el.removeClass(\"animate\");\n    self.el.removeClass(\"initialize\");\n  }\n  function setPosition() {\n    self.el.addClass(\"animate\");\n    self.el.attr({\n      \"data-x\": fromLeft,\n      \"data-y\": fromTop });\n\n  }\n  if (initalizeFlag) {\n    setPosition();\n    window.setTimeout(resolvePromise, animationDuration + 50);\n  } else {\n    setPosition();\n    window.setTimeout(resolvePromise, animationDuration);\n  }\n  return getPromise;\n};\n/**/\n\n/**\n * Check if move is possible\n */\nTile.prototype.moveCheck = function () {\n  // run all checks; return true if any moves are possible\n  if (\n  this.move(\"up\", true) ||\n  this.move(\"right\", true) ||\n  this.move(\"down\", true) ||\n  this.move(\"left\", true))\n  {\n    this.canMove = true;\n    return true;\n  } else {\n    this.canMove = false;\n    return false;\n  }\n};\n/**/\n\n/**\n * Move logic\n */\nTile.prototype.move = function (getDirection, checkFlag) {\n  var checkFlag = checkFlag ? true : false;\n  var direction = getDirection.toLowerCase();\n  var getX = this.x;\n  var getY = this.y;\n\n  var getNext;\n  var isNextMatch;\n  var isNextEmpty;\n  var nextPositionArray = [];\n\n  // if UP: check next position\n  if (direction === \"up\") {\n    getNext = this.y > 0 ? this.game.board[this.x][this.y - 1] : false;\n    nextPositionArray.push(this.x, this.y - 1);\n  } else if (direction === \"right\") {\n    // if RIGHT: check next position\n    getNext = this.x < 3 ? this.game.board[this.x + 1][this.y] : false;\n    nextPositionArray.push(this.x + 1, this.y);\n  } else if (direction === \"down\") {\n    // if DOWN: check next position\n    getNext = this.y < 3 ? this.game.board[this.x][this.y + 1] : false;\n    nextPositionArray.push(this.x, this.y + 1);\n  } else if (direction === \"left\") {\n    // if LEFT: check next position\n    getNext = this.x > 0 ? this.game.board[this.x - 1][this.y] : false;\n    nextPositionArray.push(this.x - 1, this.y);\n  }\n  // Check if next position contains match or is empty\n  isNextMatch =\n  getNext &&\n  getNext.tilesArray.length === 1 &&\n  getNext.tilesArray[0].valueProp === this.valueProp;\n  isNextEmpty = getNext && getNext.tilesArray.length === 0;\n  //\n\n  // \"check only\" mode; only to check if tile can move\n  if (checkFlag) {\n    return isNextEmpty || isNextMatch ? true : false;\n  } else if (isNextEmpty || isNextMatch) {\n    // not \"check only\" mode; will actually run move logic\n    this.setPosition(nextPositionArray[0], nextPositionArray[1]);\n    this.removeOldPosition(getX, getY);\n    // do NOT continue to move if a tile has matched - and therefore MERGED into adjoining tile\n    if (!isNextMatch) {\n      this.move(direction);\n    }\n  }\n};\n/**/"],"names":["gameStart","window","game","Game","initialize","document","querySelector","style","display","flag","size","this","rows","columns","board","boardFlatten","_","flatten","score","$","html","toString","moveInProgress","Tile","x","y","el","Math","floor","random","valueProp","Object","defineProperties","value","get","set","val","find","attr","canMove","onclick","tgames","showRewardedAd","share","gameOver","ready","prototype","empty","initBoard","initTile","initEventListeners","initGridCell","getGridCell","parseHTML","appendTo","tilesArray","push","gridObj","isGameOver","emptyCell","getRandomEmptyCell","self","getGameboard","getElementById","hammertime","destroy","Hammer","recognizers","Swipe","direction","DIRECTION_ALL","on","ev","move","off","event","preventDefault","which","gameWon","tile","getElementsByClassName","length","parentNode","removeChild","alert","gameLost","gameBoard","is2048","canAnyTileMove","hasEmptyCells","forEach","index","array","getEmptyCells","moveCheck","filter","emptyGridCells","TileMerge","gameStarted","newScore","currentValue","pop","remove","setScore","moveAnimations","promiseArray","animatePosition","when","apply","then","getDirection","toLowerCase","hasAnyTileMoved","orderBy","getTile","setPosition","getX","getY","removeOldPosition","initalizeFlag","fromLeft","fromTop","getPromise","Deferred","resolvePromise","resolve","removeClass","addClass","setTimeout","animationDuration","checkFlag","getNext","isNextMatch","isNextEmpty","nextPositionArray"],"sourceRoot":""}