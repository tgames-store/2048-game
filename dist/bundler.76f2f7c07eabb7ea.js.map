{"version":3,"file":"bundler.76f2f7c07eabb7ea.js","mappings":"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","sources":["webpack:///./src/script.js"],"sourcesContent":["import \"./style.css\";\n\n/**\n * TODO:\n * - Style win/lose, move out of \"alert\"\n * - Add in previous high score via localstorage\n * - Update footer\n */\n\n/*\n* Dependencies:\n* Lodash, jQuery, hammerjs\n*/\n\n\nlet btnNew = document.querySelector('.popup__body--btn__new')\nbtnNew.onclick = () => {\n  gameStart()\n}\n\nlet btnShare = document.querySelector('.popup__body--btn__share')\nbtnShare.onclick = () => {\n  tgames.share()\n}\n\nlet btnRestart = document.querySelector('.popup__body--btn__restart')\nbtnRestart.onclick = () => {\n  gameStart()\n}\n\n\nfunction gameStart() {\n  window.game = new Game(4);\n  window.game.initialize();\n  let popup = document.querySelector('.popup');\n  popup.style.display = 'none';\n  tgames.gameStarted()\n}\n$(document).ready(gameStart);\n\n/*\n   * Game Board\n   */\nfunction Game(size) {\n  this.rows = size;\n  this.columns = size;\n  // board is set as 2d array, with grid cell object for each position\n  this.board = [];\n  this.boardFlatten = function () {\n    return _.flatten(this.board);\n  };\n  //\n  // score setup\n  this.score = 0;\n  $('[data-js=\"score\"]').html(this.score.toString());\n  //\n  // flag to check whether any tile movement is in progress;\n  this.moveInProgress = false;\n  //\n}\n\n/**\n * Run all initializations\n */\nGame.prototype.initialize = function () {\n  // clear any previous grid; per jQuery docs, empty also removes event listeners\n  $(\".grid\").empty();\n  $(\".tile-container\").empty();\n  //\n  // run new setup\n  this.initBoard();\n  this.initTile();\n  this.initEventListeners();\n  //\n};\n/**/\n\n/**\n * Initialize grid\n */\nGame.prototype.initBoard = function () {\n  // return grid cell object\n  function initGridCell(x, y) {\n    var getGridCell = $.parseHTML($(\"#template_grid_cell\").html());\n    $(getGridCell).appendTo(\".grid\");\n    return {\n      x: x,\n      y: y,\n      tilesArray: [] };\n  }\n  //\n  // create 2d array and push grid cell object\n  for (var x = 0; x < this.rows; x++) {\n    var newArray = [];\n    this.board.push(newArray);\n    for (var y = 0; y < this.columns; y++) {\n      var gridObj = initGridCell(x, y);\n      var rowCell = this.board[x];\n      rowCell.push(gridObj);\n    }\n  }\n  //\n};\n\n/**\n * Initialize tiles\n */\nGame.prototype.initTile = function () {\n  // isGameOver determines whether the game is finished; needs to be run: before and after creating tile\n  this.isGameOver();\n  //\n  var emptyCell = this.getRandomEmptyCell();\n  var tile = new Tile(emptyCell.x, emptyCell.y, game);\n  // isGameOver determines whether the game is finished; needs to be run: before and after creating tile\n  this.isGameOver();\n  //\n};\n/**/\n\n/**\n * Set event listeners\n */\nGame.prototype.initEventListeners = function () {\n  var self = this;\n  var getGameboard = document.getElementById(\"touchGameboard\");\n\n  /*\n         Touch events with Hammerjs\n     */\n  window.hammertime && window.hammertime.destroy();\n  window.hammertime = new Hammer(getGameboard, {\n    recognizers: [[Hammer.Swipe, { direction: Hammer.DIRECTION_ALL }]] });\n\n  window.hammertime.\n  on(\"swipeleft\", function (ev) {\n    self.move(\"left\");\n  }).\n  on(\"swiperight\", function (ev) {\n    self.move(\"right\");\n  }).\n  on(\"swipedown\", function (ev) {\n    self.move(\"down\");\n  }).\n  on(\"swipeup\", function (ev) {\n    self.move(\"up\");\n  });\n  /**/\n\n  /*\n         NOTE: Remove event listeners before applying new listeners,\n         because this initialization runs each time a new game is created\n     */\n  // keypress events for up, down, left, right\n  $(document).\n  off(\"keydown.move\").\n  on(\"keydown.move\", function (event) {\n    event.preventDefault();\n    switch (event.which) {\n      // left\n      case 37:\n        self.move(\"left\");\n        break;\n      // up\n      case 38:\n        self.move(\"up\");\n        break;\n      // right\n      case 39:\n        self.move(\"right\");\n        break;\n      // down\n      case 40:\n        self.move(\"down\");\n        break;}\n\n  });\n  //\n  // New game click handler\n  $('[data-js=\"newGame\"]').\n  off(\"click.newGame\").\n  on(\"click.newGame\", window.gameStart);\n  //\n};\n/**/\n\n/**\n * Game is WON!\n */\nGame.prototype.gameWon = function () {\n  let tile = document.getElementsByClassName('tile')\n  while(tile.length > 0){\n    tile[0].parentNode.removeChild(tile[0]);\n  }\n  let popup = document.querySelector('.popup');\n  popup.style.display = 'flex';\n  alert(\"you won\");\n  tgames.gameOver( game.score )\n  tgames.showRewardedAd();\n};\n/**/\n\n/**\n * Game is LOST!\n */\nGame.prototype.gameLost = function () {\n  let tile = document.getElementsByClassName('tile')\n  while(tile.length > 0){\n    tile[0].parentNode.removeChild(tile[0]);\n  }\n  let popup = document.querySelector('.popup');\n  popup.style.display = 'flex';\n  tgames.gameOver( game.score )\n  tgames.showRewardedAd();\n  alert('What a loser?!')\n\n};\n/**/\n\n/**\n * Check if game over\n */\nGame.prototype.isGameOver = function () {\n  var gameBoard = this.boardFlatten();\n\n  var is2048 = false;\n  var canAnyTileMove = false;\n  var hasEmptyCells = false;\n\n  // check if 2048\n  gameBoard.forEach(function (val, index, array) {\n    val.tilesArray.forEach(function (val, index, array) {\n      if (val.valueProp === 131072) {\n        is2048 = true;\n      }\n    });\n  });\n  // check if there are empty cells\n  if (this.getEmptyCells().length > 0) {\n    hasEmptyCells = true;\n  }\n  // Check if move possible\n  gameBoard.forEach(function (val, index, array) {\n    val.tilesArray.forEach(function (val, index, array) {\n      val.moveCheck();\n      if (val.canMove === true) {\n        canAnyTileMove = true;\n      }\n    });\n  });\n\n  // if game won\n  if (is2048) {\n    this.gameWon();\n    return true;\n  } else if (!hasEmptyCells && !canAnyTileMove) {\n    // if no empty cells || no tile can move, the game is lost\n    this.gameLost();\n    return true;\n  } else {\n    // if there is an empty || a tile can move, return false for isGameOver\n    return false;\n  }\n  //\n};\n\n/**\n * Get empty cells\n */\nGame.prototype.getEmptyCells = function () {\n  var emptyCells = _.filter(this.boardFlatten(), function (val) {\n    return !val.tilesArray.length;\n  });\n  return emptyCells;\n};\n/**/\n\n/**\n * Return random empty cell for new tile creation\n */\nGame.prototype.getRandomEmptyCell = function () {\n  var emptyGridCells = this.getEmptyCells();\n  var randomIndex = Math.floor(\n  Math.random() * Math.floor(emptyGridCells.length));\n\n\n  return emptyGridCells[randomIndex];\n};\n/**/\n\n/**\n * Merge tiles\n */\nGame.prototype.TileMerge = function () {\n  var gameBoard = this.boardFlatten();\n  var newScore = this.score;\n\n  // loop through all tiles\n  gameBoard.forEach(function (val, index, array) {\n    if (val.tilesArray.length === 2) {\n      // get current value of 1st tile\n      var currentValue = val.tilesArray[0].valueProp;\n      // update value\n      val.tilesArray[0].value = currentValue * 2;\n      // remove 2nd tile\n      var x = val.tilesArray.pop();\n      x.el.remove();\n      // update score\n      newScore += currentValue;\n    }\n  });\n  // update game score at the end\n  this.score = newScore;\n  $('[data-js=\"score\"]').html(this.score.toString());\n};\n/**/\n\n/**\n * Move animations\n */\nGame.prototype.moveAnimations = function (gameBoard) {\n  var self = this;\n  var promiseArray = [];\n\n  if (this.moveInProgress) {\n    return false;\n  }\n\n  this.moveInProgress = true;\n  gameBoard.forEach(function (val, index, array) {\n    val.tilesArray.forEach(function (val, index, array) {\n      promiseArray.push(val.animatePosition());\n    });\n  });\n\n  $.when.apply($, promiseArray).then(function () {\n    self.moveInProgress = false;\n    self.TileMerge();\n    self.initTile();\n  });\n  if (promiseArray.length === 0) {\n    self.moveInProgress = false;\n    self.TileMerge();\n    self.initTile();\n  }\n};\n/**/\n\n/**\n * Move logic\n */\nGame.prototype.move = function (getDirection) {\n  var gameBoard;\n  // direction passed as argument\n  var direction = getDirection.toLowerCase();\n  //\n  // flag to check whether any\n  var hasAnyTileMoved = false;\n  //\n  if (this.moveInProgress) {\n    return false;\n  }\n\n  // if UP:\n  if (direction === \"up\") {\n    gameBoard = _.orderBy(this.boardFlatten(), \"y\", \"asc\");\n  } else if (direction === \"right\") {\n    // if RIGHT:\n    gameBoard = _.orderBy(this.boardFlatten(), \"x\", \"desc\");\n  } else if (direction === \"down\") {\n    // if DOWN\n    gameBoard = _.orderBy(this.boardFlatten(), \"y\", \"desc\");\n  } else if (direction === \"left\") {\n    // if LEFT\n    gameBoard = _.orderBy(this.boardFlatten(), \"y\", \"asc\");\n  }\n\n  // loop through all tiles and run tile move foreach\n  //\n  gameBoard.forEach(function (val, index, array) {\n    val.tilesArray.length ?\n    val.tilesArray.forEach(function (val) {\n      if (val.move(direction, true)) {\n        hasAnyTileMoved = true;\n        val.move(direction);\n      }\n    }) :\n    false;\n  });\n  //\n  // run animation logic at the end\n  hasAnyTileMoved ? this.moveAnimations(gameBoard) : false;\n};\n/**/\n\n/*\n   * Tile\n   */\n\n\nfunction getRandomInt(max) {\n  return Math.floor(Math.random() * max);\n}\n\nfunction Tile(x, y, game) {\n  this.game = game;\n\n  // jQuery element\n  this.el;\n  // current position\n  this.x = x;\n  this.y = y;\n  // Getter/Setter for value; updates html on set; defaulted to 2 on creation\n  if(getRandomInt(10) === 4){\n    this.valueProp = 4;\n  }else{\n    this.valueProp = 2;\n  }\n\n  Object.defineProperties(this, {\n    value: {\n      get: function () {\n        return this.valueProp;\n      },\n      set: function (val) {\n        this.valueProp = val;\n        this.el.\n        find(\".tile_number\").\n        html(this.valueProp).\n        attr(\"data-value\", val);\n      } } });\n\n\n  // can move flag\n  this.canMove = false;\n  // initialize\n  this.initialize();\n}\n\n/**\n * Initialize\n */\nTile.prototype.initialize = function () {\n  // Get html from template and set number text\n  var getTile = $.parseHTML($(\"#template_tile\").html());\n  this.el = $(getTile);\n  this.el.\n  find(\".tile_number\").\n  html(this.valueProp).\n  attr(\"data-value\", this.valueProp);\n\n  // Set position and append to page; initializeFlag is set to True to remove animation and append immediately in correct position\n  this.setPosition(this.x, this.y);\n  this.animatePosition(true);\n  this.el.appendTo(\".tile-container\");\n};\n/**/\n\n/**\n * Set new position\n */\nTile.prototype.setPosition = function (getX, getY) {\n  this.x = getX;\n  this.y = getY;\n  this.game.board[getX][getY].tilesArray.push(this);\n};\n/**/\n\n/**\n * Remove old position\n */\nTile.prototype.removeOldPosition = function (getX, getY) {\n  this.game.board[getX][getY].tilesArray.pop();\n};\n/**/\n\n/**\n * Animate to position\n */\nTile.prototype.animatePosition = function (initalizeFlag) {\n  var self = this;\n  var fromLeft = this.x * (100 / this.game.rows);\n  var fromTop = this.y * (100 / this.game.columns);\n  // Initialize flag sets animationDuration to 0 to append immediately in correct position\n  var animationDuration = 175;\n  var getPromise = $.Deferred();\n\n  if (initalizeFlag) {\n    this.el.addClass(\"initialize\");\n  } else {\n    this.el.removeClass(\"initialize\");\n  }\n\n  function resolvePromise() {\n    getPromise.resolve();\n    self.el.removeClass(\"animate\");\n    self.el.removeClass(\"initialize\");\n  }\n  function setPosition() {\n    self.el.addClass(\"animate\");\n    self.el.attr({\n      \"data-x\": fromLeft,\n      \"data-y\": fromTop });\n\n  }\n  if (initalizeFlag) {\n    setPosition();\n    window.setTimeout(resolvePromise, animationDuration + 50);\n  } else {\n    setPosition();\n    window.setTimeout(resolvePromise, animationDuration);\n  }\n  return getPromise;\n};\n/**/\n\n/**\n * Check if move is possible\n */\nTile.prototype.moveCheck = function () {\n  // run all checks; return true if any moves are possible\n  if (\n  this.move(\"up\", true) ||\n  this.move(\"right\", true) ||\n  this.move(\"down\", true) ||\n  this.move(\"left\", true))\n  {\n    this.canMove = true;\n    return true;\n  } else {\n    this.canMove = false;\n    return false;\n  }\n};\n/**/\n\n/**\n * Move logic\n */\nTile.prototype.move = function (getDirection, checkFlag) {\n  var checkFlag = checkFlag ? true : false;\n  var direction = getDirection.toLowerCase();\n  var getX = this.x;\n  var getY = this.y;\n\n  var getNext;\n  var isNextMatch;\n  var isNextEmpty;\n  var nextPositionArray = [];\n\n  // if UP: check next position\n  if (direction === \"up\") {\n    getNext = this.y > 0 ? this.game.board[this.x][this.y - 1] : false;\n    nextPositionArray.push(this.x, this.y - 1);\n  } else if (direction === \"right\") {\n    // if RIGHT: check next position\n    getNext = this.x < 3 ? this.game.board[this.x + 1][this.y] : false;\n    nextPositionArray.push(this.x + 1, this.y);\n  } else if (direction === \"down\") {\n    // if DOWN: check next position\n    getNext = this.y < 3 ? this.game.board[this.x][this.y + 1] : false;\n    nextPositionArray.push(this.x, this.y + 1);\n  } else if (direction === \"left\") {\n    // if LEFT: check next position\n    getNext = this.x > 0 ? this.game.board[this.x - 1][this.y] : false;\n    nextPositionArray.push(this.x - 1, this.y);\n  }\n  // Check if next position contains match or is empty\n  isNextMatch =\n  getNext &&\n  getNext.tilesArray.length === 1 &&\n  getNext.tilesArray[0].valueProp === this.valueProp;\n  isNextEmpty = getNext && getNext.tilesArray.length === 0;\n  //\n\n  // \"check only\" mode; only to check if tile can move\n  if (checkFlag) {\n    return isNextEmpty || isNextMatch ? true : false;\n  } else if (isNextEmpty || isNextMatch) {\n    // not \"check only\" mode; will actually run move logic\n    this.setPosition(nextPositionArray[0], nextPositionArray[1]);\n    this.removeOldPosition(getX, getY);\n    // do NOT continue to move if a tile has matched - and therefore MERGED into adjoining tile\n    if (!isNextMatch) {\n      this.move(direction);\n    }\n  }\n};\n/**/"],"names":["gameStart","window","game","Game","initialize","document","querySelector","style","display","tgames","gameStarted","size","this","rows","columns","board","boardFlatten","_","flatten","score","$","html","toString","moveInProgress","Tile","x","y","el","Math","floor","random","valueProp","Object","defineProperties","value","get","set","val","find","attr","canMove","onclick","share","ready","prototype","empty","initBoard","initTile","initEventListeners","initGridCell","getGridCell","parseHTML","appendTo","tilesArray","push","gridObj","isGameOver","emptyCell","getRandomEmptyCell","self","getGameboard","getElementById","hammertime","destroy","Hammer","recognizers","Swipe","direction","DIRECTION_ALL","on","ev","move","off","event","preventDefault","which","gameWon","tile","getElementsByClassName","length","parentNode","removeChild","alert","gameOver","showRewardedAd","gameLost","gameBoard","is2048","canAnyTileMove","hasEmptyCells","forEach","index","array","getEmptyCells","moveCheck","filter","emptyGridCells","TileMerge","newScore","currentValue","pop","remove","moveAnimations","promiseArray","animatePosition","when","apply","then","getDirection","toLowerCase","hasAnyTileMoved","orderBy","getTile","setPosition","getX","getY","removeOldPosition","initalizeFlag","fromLeft","fromTop","getPromise","Deferred","resolvePromise","resolve","removeClass","addClass","setTimeout","animationDuration","checkFlag","getNext","isNextMatch","isNextEmpty","nextPositionArray"],"sourceRoot":""}